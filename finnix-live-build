#!/bin/sh

set -e

VERSION="${VERSION:-dev}"
CODENAME="${CODENAME:-racine}"
ARCH="${ARCH:-$(dpkg --print-architecture)}"

lock() {
    local file=$1
    exec 9>"$file"
    if ! flock -x -w 1 9; then
        echo "$file lock failed" >&2
        exit 1
    fi
}

lock "/run/shm/finnix-live-build-${ARCH}.lock"

DATE="$(date -u +"%F %T")"
YEAR="$(date -u +"%Y")"
if [ "${ARCH}" = "amd64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,grub-pc"
    ISO_FILENAME="finnix-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
elif [ "${ARCH}" = "i386" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,grub-pc"
    ISO_FILENAME="finnix-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
elif [ "${ARCH}" = "arm64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi"
    ISO_FILENAME="finnix-${ARCH}.hybrid.iso"
    MEMTEST=""
else
    BINARY_IMAGES="iso"
    BOOTLOADERS=""
    ISO_FILENAME="finnix-${ARCH}.iso"
    MEMTEST=""
fi

if [ "$(dnsdomainname)" = "snowman.lan" ]; then
    APT_HTTP_PROXY="http://deb-proxy.snowman.lan:8000"
fi

BASE_DIR="$(dirname "$(readlink -f "$0")")"
DATA_DIR="${DATA_DIR:-${BASE_DIR}/nobackup}"
CACHE_DIR="${CACHE_DIR:-${DATA_DIR}/cache}"
LB_DIR="${DATA_DIR}/lb"
LB_CACHE_DIR="${CACHE_DIR}/lb"

cd /
rm -rf "${LB_DIR}"
mkdir -p "${LB_DIR}"
cd "${LB_DIR}"

lb config noauto \
  --apt-http-proxy "${APT_HTTP_PROXY}" \
  --apt-indices false \
  --apt-recommends false \
  --apt-source-archives false \
  --architectures "${ARCH}" \
  --archive-areas "main contrib non-free" \
  --backports false \
  --binary-images "${BINARY_IMAGES}" \
  --bootappend-live "boot=live quiet" \
  --bootloaders "${BOOTLOADERS}" \
  --cache-indices true \
  --distribution testing \
  --hdd-label FINNIX \
  --image-name finnix \
  --iso-application Finnix \
  --iso-preparer Finnix \
  --iso-publisher Finnix \
  --iso-volume "Finnix ${VERSION}" \
  --memtest "${MEMTEST}" \
  --security false \
  --updates false \
  --zsync false \
  --mode debian

if [ -d "${LB_CACHE_DIR}" ]; then
    if [ -e "${LB_CACHE_DIR}/bootstrap/etc/hostname" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/bootstrap/etc/hostname" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/bootstrap"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/bootstrap"
    fi
    if [ -e "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/indices.bootstrap"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/indices.bootstrap"
    fi
    rm -rf "${LB_DIR}/cache"
    ln -sf "${LB_CACHE_DIR}" "${LB_DIR}/cache"
fi

for i in "${BASE_DIR}/hooks"/*.hook.chroot.in; do
    sed -e "s|@CODENAME@|${CODENAME}|g" \
        -e "s|@VERSION@|${VERSION}|g" \
    "${i}" > "${LB_DIR}/config/hooks/normal/$(basename "$i" .in)"
done

mkdir -p "${LB_DIR}/config/bootloaders/grub-pc"
cp "${BASE_DIR}/grub/memtest.cfg" "${LB_DIR}/config/bootloaders/grub-pc/"
sed -e "s|@CODENAME@|${CODENAME}|g" \
    -e "s|@VERSION@|${VERSION}|g" \
    -e "s|@DATE@|${DATE}|g" \
    -e "s|@YEAR@|${YEAR}|g" \
    -e "s|@ARCHITECTURE@|${ARCH}|g" \
"${BASE_DIR}/grub/splash.svg" | rsvg-convert --format png --width 640 --height 480 >"${LB_DIR}/config/bootloaders/grub-pc/splash.png"
mkdir -p "${LB_DIR}/config/bootloaders/grub-pc/live-theme"
cp "${BASE_DIR}/grub/theme.txt" "${LB_DIR}/config/bootloaders/grub-pc/live-theme/"

cp "${BASE_DIR}/lists"/*.list.chroot "${LB_DIR}/config/package-lists/"

if [ -e "${BASE_DIR}/squashfs.sort" ]; then
    mkdir -p "${LB_DIR}/config/rootfs"
    cp "${BASE_DIR}/squashfs.sort" "${LB_DIR}/config/rootfs/squashfs.sort"
fi

lb build

ls -lsa "${LB_DIR}/${ISO_FILENAME}"
file "${LB_DIR}/${ISO_FILENAME}"
