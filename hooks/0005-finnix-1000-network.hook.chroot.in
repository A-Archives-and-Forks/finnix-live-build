#!/bin/sh

set -e

PRODUCT_ID="{{ PRODUCT_ID }}"

mkdir -p "/lib/${PRODUCT_ID}"
cat <<"EOM" >"/lib/${PRODUCT_ID}/interfaces-convert"
#!/usr/bin/env python3

# interfaces-convert
# Copyright (C) 2021 Ryan Finnie
# SPDX-License-Identifier: GPL-2.0+

# This program converts sections in /etc/network/interfaces to files in
# /etc/systemd/network/, and (if needed) from /etc/resolv.conf to
# /etc/systemd/resolved.conf, putting the systemd-resolved stub in its
# place.
#
# This must be run before anything uses e-n-i, namely before udevd as
# ifupdown installs rules which bring up allow-hotplug entries.
#
# Note that this was built to translate entries built by live-boot, and
# is not meant to be a general-purpose e-n-i converter.

import configparser
import io
import os


FILES_TO_WRITE = {}
REPLACE_RESOLVCONF = False


def systemd_config():
    config = configparser.ConfigParser()
    config.optionxform = str
    return config


def process_section(section):
    global FILES_TO_WRITE

    if "iface" not in section:
        return False
    interface = section["iface"][0]
    if section["iface"][2] == "loopback":
        return False
    if (section["iface"][1] != "inet") or (
        section["iface"][2] not in ("dhcp", "static")
    ):
        output = systemd_config()
        output["Match"] = {"Name": interface}
        output["Link"] = {"Unmanaged": "yes"}
        with io.StringIO() as f:
            output.write(f, space_around_delimiters=False)
            FILES_TO_WRITE[
                "/etc/systemd/network/10-{}.network".format(interface)
            ] = f.getvalue()
        return False

    output = systemd_config()
    output["Match"] = {"Name": interface}
    output["Link"] = {}
    output["Network"] = {}
    if ("address" in section) and ("netmask" in section):
        output["Network"]["Address"] = "{}/{}".format(
            section["address"][0], section["netmask"][0]
        )
        if "gateway" in section:
            output["Network"]["Gateway"] = section["gateway"][0]
    else:
        output["Network"]["DHCP"] = "yes"
    if "allow-hotplug" in section:
        output["Link"]["RequiredForOnline"] = "no"
    with io.StringIO() as f:
        output.write(f, space_around_delimiters=False)
        FILES_TO_WRITE[
            "/etc/systemd/network/10-{}.network".format(interface)
        ] = f.getvalue()
    return True


def convert_interfaces():
    global FILES_TO_WRITE

    if not os.path.exists("/etc/network/interfaces"):
        return

    rewritten_interfaces = ""
    section = {}
    section_text = ""
    with open("/etc/network/interfaces") as f:
        for raw_line in f:
            line = raw_line.strip()
            if line == "" and section:
                if not process_section(section):
                    rewritten_interfaces += section_text + "\n"
                section = {}
                section_text = ""
                continue
            ls = line.split(" ")
            if not ls[0].startswith("#"):
                section[ls[0]] = ls[1:]
            section_text += raw_line

    if section:
        if not process_section(section):
            rewritten_interfaces += section_text + "\n"

    FILES_TO_WRITE["/etc/network/interfaces"] = rewritten_interfaces


def convert_resolv():
    global FILES_TO_WRITE
    global REPLACE_RESOLVCONF

    if not os.path.exists("/etc/systemd/resolved.conf"):
        return

    nameservers = []
    domains = []
    with open("/etc/resolv.conf") as f:
        for line in f:
            line = line.strip()
            ls = line.split(" ")
            if ls[0] == "nameserver":
                if ls[1] == "127.0.0.53":
                    continue
                nameservers.append(ls[1])
            elif ls[0] in ("search", "domain"):
                for s in ls[1:]:
                    if s == ".":
                        continue
                    domains.append(s)

    if nameservers or domains:
        resolved = systemd_config()
        resolved.read("/etc/systemd/resolved.conf")
        if "Resolve" not in resolved:
            resolved["Resolve"] = {}
        if nameservers:
            resolved["Resolve"]["DNS"] = " ".join(nameservers)
        if domains:
            resolved["Resolve"]["Domains"] = " ".join(domains)
        with io.StringIO() as f:
            resolved.write(f, space_around_delimiters=False)
            FILES_TO_WRITE["/etc/systemd/resolved.conf"] = f.getvalue()

    REPLACE_RESOLVCONF = True


def write_files():
    global FILES_TO_WRITE
    global REPLACE_RESOLVCONF

    for fn in FILES_TO_WRITE:
        with open(fn, "w") as f:
            f.write(FILES_TO_WRITE[fn])

    if REPLACE_RESOLVCONF:
        os.remove("/etc/resolv.conf")
        os.symlink("/run/systemd/resolve/stub-resolv.conf", "/etc/resolv.conf")


if __name__ == "__main__":
    convert_interfaces()
    convert_resolv()
    write_files()
EOM
chmod 0755 "/lib/${PRODUCT_ID}/interfaces-convert"

cat <<"EOM" >/etc/systemd/system/network-config-setup.service
[Unit]
Description=Set up network configurations
DefaultDependencies=no
# Before systemd-udevd becuase ifupdown will try to manage hotplug
# interfaces via udev
Before=network.target ifupdown-pre.service systemd-udevd.service

[Service]
Type=oneshot
ExecStart=/lib/{{ PRODUCT_ID }}/interfaces-convert
EOM
systemctl add-wants sysinit.target network-config-setup.service
systemctl add-wants network.target systemd-networkd.service
systemctl add-wants network.target systemd-resolved.service

systemctl add-wants "${PRODUCT_ID}.target" network.target
